#![allow(clippy::similar_names, dead_code)]

// Systems of Linear Equations

pub fn gauss1(coefficients: Vec<Vec<f64>>, constants: Vec<f64>) -> Option<Vec<f64>> {
    let n = coefficients.len();
    for i in 0..n {
        if coefficients[i].len() != n {
            return None;
        }
    }
    if constants.len() != n {
        return None;
    }

    let mut coefficients = coefficients;
    let mut constants = constants;

    let mut xs = vec![0.0; n];

    for i in 0..n-1 {
        for j in i+1..n {
            let ratio = coefficients[j][i] / coefficients[i][i];
            for k in i..n {
                coefficients[j][k] -= ratio * coefficients[i][k];
            }
            constants[j] -= ratio * constants[i];
        }
    }

    for i in (0..n).rev() {
        let mut sum = 0.0;
        for j in i+1..n {
            sum += coefficients[i][j] * xs[j];
        }
        xs[i] = (constants[i] - sum) / coefficients[i][i];
    }

    Some(xs)
} 


pub fn gauss2(coefficients: Vec<Vec<f64>>, constants: Vec<f64>) -> Option<Vec<f64>> {
    let n = coefficients.len();
    for i in 0..n {
        if coefficients[i].len() != n {
            return None;
        }
    }
    if constants.len() != n {
        return None;
    }

    let mut coefficients = coefficients;
    let mut constants = constants;

    let mut xs = vec![0.0; n];

    for i in 0..n-1 {
        // search for max and swap rows
        let mut max = 0.0;
        let mut mrow: usize = 0;
        for j in i..n {
            if max < coefficients[j][i].abs() {
                max = coefficients[j][i].abs();
                mrow = j;
            }
        }
        if mrow != i {
            coefficients.swap(i, mrow);
            constants.swap(i, mrow);
        }
        for j in i+1..n {
            let ratio = coefficients[j][i] / coefficients[i][i];
            for k in i..n {
                coefficients[j][k] -= ratio * coefficients[i][k];
            }
            constants[j] -= ratio * constants[i];
            // println!("{ratio}");
        }
        // println!("coefficients: {:?}", coefficients);
        // println!("constants: {:?}", constants);
    }

    for i in (0..n).rev() {
        let mut sum = 0.0;
        for j in i+1..n {
            sum += coefficients[i][j] * xs[j];
        }
        xs[i] = (constants[i] - sum) / coefficients[i][i];
    }

    Some(xs)
} 

pub fn gauss3(coefficients: Vec<Vec<f64>>, constants: Vec<f64>) -> Option<Vec<f64>> {
    let n = coefficients.len();
    for i in 0..n {
        if coefficients[i].len() != n {
            return None;
        }
    }
    if constants.len() != n {
        return None;
    }

    let mut coefficients = coefficients;
    let mut constants = constants;

    let mut xs = vec![0.0; n];
    let mut mutations = vec![];
    for i in 0..n {
        mutations.push(i);
    }

    for i in 0..n-1 {
        // search for max and swap columns
        let mut max = 0.0;
        let mut mcol = i;
        for j in i..n {
            if max < coefficients[i][j].abs() {
                max = coefficients[i][j].abs();
                mcol = j;
            }
        }
        if mcol != i {
            for j in 0..n {
                coefficients[j].swap(i, mcol);
            }
            mutations.swap(i, mcol);
            // constants.swap(i, mcol);
        }
        for j in i+1..n {
            let ratio = coefficients[j][i] / coefficients[i][i];
            for k in i..n {
                coefficients[j][k] -= ratio * coefficients[i][k];
            }
            constants[j] -= ratio * constants[i];
        }
    }
    // println!("coefficients: {:?}", coefficients);
    // println!("constants: {:?}", constants);

    for i in (0..n).rev() {
        let mut sum = 0.0;
        for j in i+1..n {
            sum += coefficients[i][j] * xs[j];
        }
        xs[i] = (constants[i] - sum) / coefficients[i][i];
    }

    let mut out = vec![0.0; n];
    for i in 0..n {
        out[mutations[i]] = xs[i];
    }

    Some(out)
} 


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sole_gauss1_1() {
        let coefficients = vec![
            vec![4.0, -2.0, 4.0, -2.0],
            vec![3.0,  1.0, 4.0,  2.0],
            vec![2.0,  4.0, 2.0,  1.0],
            vec![2.0, -2.0, 4.0,  2.0]
        ];
        let constants = vec![8.0,   7.0,  10.0,   2.0];
        let res = gauss1(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }

    #[test]
    fn test_sole_gauss1_2() {
        let coefficients = vec![
            vec![10.0, -7.0, 0.0],
            vec![-3.0,  2.0, 6.0],
            vec![ 5.0, -1.0, 5.0]
        ];
        let constants = vec![6.0,   4.0,   3.0];
        let res = gauss1(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }

    #[test]
    fn test_sole_gauss1_3() {
        let coefficients = vec![
            vec![ 5.0,   1.0,   7.0,  -7.0,   6.0,   9.0,  -8.0,   8.0,   6.0,  -1.0,  -8.0,  -7.0,   2.0,  -4.0,  -8.0,   0.0,  -6.0,  -7.0, -10.0,  -8.0],
            vec![ 7.0,  -6.0,  -6.0,  -3.0,  10.0,   8.0,  -8.0,  -4.0,   2.0,  -4.0,   0.0,   7.0,   1.0,   7.0,   2.0,   2.0,   4.0,  -4.0,   3.0,   7.0],
            vec![ 9.0,  -4.0,  -7.0,   4.0,  -9.0,   8.0,   4.0,   9.0,   5.0,   5.0,  -4.0,  -7.0,   0.0,  -6.0,   4.0,   2.0,   1.0,   3.0,  -2.0,   3.0],
            vec![ 5.0,   3.0,  -4.0,   1.0, -10.0,  -9.0,   6.0,   9.0,  -9.0,  -5.0,   0.0, -10.0,  -8.0,   9.0,   0.0,   5.0,   0.0,   7.0,  -4.0,  10.0],
            vec![-3.0,  -9.0,  -9.0,  10.0,   7.0,   1.0,   2.0,   3.0,   5.0,   8.0,  -2.0,  -1.0,   9.0,  -1.0,   1.0,   1.0,  -2.0,  -8.0,   7.0,   4.0],
            vec![ 3.0,  -3.0,   5.0,  -8.0,  -1.0,  -4.0,   8.0,  -1.0,   7.0,  10.0, -10.0,  -1.0,   4.0,   0.0,   6.0,  -4.0,  -9.0,  -6.0,  -4.0,   0.0],
            vec![ 3.0,   0.0,  10.0,   3.0,  -6.0,   7.0,  -7.0,  -8.0,   9.0,  -4.0,  -7.0,   6.0,   9.0, -10.0,   2.0,  -5.0,   3.0,  -1.0,  -3.0, -10.0],
            vec![ 7.0,   2.0,  -4.0,   4.0,   0.0,   3.0,  -6.0, -10.0,   0.0,  -4.0,   4.0,   1.0,  -9.0,  -2.0,  -6.0,   9.0,   1.0,   5.0, -10.0,   8.0],
            vec![ 9.0,  -7.0,   6.0,   6.0,   5.0,   0.0,  -7.0,  -7.0,   8.0,   6.0,  -7.0,  -6.0,  -1.0,  -9.0,  -1.0,  -9.0,   1.0,  -1.0,   1.0,  -9.0],
            vec![ 6.0,  -7.0,   5.0,   8.0,  -3.0, -10.0,   1.0,  -4.0,  -1.0,  -7.0,   6.0,   4.0,   5.0,  -5.0,  10.0,   1.0, -10.0,   7.0,  -6.0,  -7.0],
            vec![ 4.0,  -8.0,  -4.0,  -6.0,   2.0,  -5.0,   2.0,   6.0,   2.0,   1.0,  -9.0,  -4.0,   9.0,  -6.0,  -2.0,  -8.0,  -3.0,   1.0,  -1.0,   3.0],
            vec![ 3.0,  -7.0,   2.0,  -5.0, -10.0,  -2.0,   2.0, -10.0,   4.0,   6.0, -10.0,  -5.0,  -9.0,  -1.0,   7.0,   5.0,  -1.0,  -2.0,  -4.0,  -4.0],
            vec![ 7.0,   3.0,   0.0,  -2.0,   6.0,  -3.0,  10.0,   4.0,  -7.0,   1.0,   4.0,   5.0,  -2.0,  -5.0, -10.0,   5.0,   7.0,   5.0,  -9.0, -10.0],
            vec![ 1.0, -10.0,  -4.0,   4.0,  10.0,   3.0,   4.0,  -2.0,  -5.0,  10.0,  -2.0,  -3.0,  -1.0,  10.0,   4.0,   5.0,   9.0,   8.0,  -6.0,  -5.0],
            vec![-3.0,  -1.0,   6.0,  -5.0,   1.0,  -6.0,   1.0,  -3.0,   9.0,   4.0,   6.0,   0.0,  -6.0, -10.0,   2.0,   5.0,  -2.0,  -2.0,   2.0,   9.0],
            vec![-9.0,   2.0,  -2.0,   1.0,  -9.0,   7.0,  10.0,   2.0,   3.0,  -8.0,  -8.0,   5.0,   9.0, -10.0,   8.0,  -8.0,   6.0,   1.0,  -4.0, -10.0],
            vec![ 4.0,  -7.0,   0.0,   5.0,  -7.0,  10.0,   3.0,  -4.0,   9.0,  -9.0,   3.0,  -2.0,  -1.0,  10.0,   7.0,  -1.0, -10.0,   5.0,   7.0,  -5.0],
            vec![-7.0,   9.0,   8.0,   1.0,   0.0,   0.0,   0.0,   5.0,  -1.0,  -1.0, -10.0, -10.0,   4.0,  -9.0,   3.0,   5.0,  -2.0,   2.0,  -5.0,  -9.0],
            vec![-5.0,   6.0,   3.0, -10.0,  -4.0,   0.0,   5.0,   2.0,   9.0,   3.0,   4.0,   3.0,   8.0,   1.0,   1.0,   5.0,   1.0,  -8.0, -10.0,  -8.0],
            vec![ 4.0,  -9.0,  -4.0,   9.0,  -1.0,  10.0,   9.0, -10.0,  -8.0,   2.0,   4.0,   7.0,   8.0,   1.0,  -5.0,  -7.0,   5.0,   3.0,   5.0,  -8.0],
        ];
        let constants = vec![-8.0, 2.0, 5.0, 7.0, 5.0, -9.0, 0.0, 9.0, 4.0, -5.0, 8.0, -9.0, 1.0, 3.0, -2.0, -2.0, 6.0, 10.0, 2.0, -5.0];

        /*
        expected:
        [
             0.42483177  1.05426056 -0.89539233 -0.06691239  0.41554584
            -0.52006665  0.10889383 -0.67418602  1.06754043 -0.37442787
            -0.09826593 -1.07958079  1.04631257  0.13620134 -0.25838214
             0.48234027  0.49453971  1.02800194  0.56439505 -0.01779573
        ]
        */

        let res = gauss1(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("[");
        for i in 0..4 {
            print!("    ");
            for j in 0..5 {
                if res[i * 5 + j] >= 0.0 {
                    print!(" ");
                }
                print!("{:.8} ", res[i * 5 + j]);
            }
            println!();
        }
        println!("]");

    }


    #[test]
    fn test_sole_gauss2_1() {
        let coefficients = vec![
            vec![4.0, -2.0, 4.0, -2.0],
            vec![3.0,  1.0, 4.0,  2.0],
            vec![2.0,  4.0, 2.0,  1.0],
            vec![2.0, -2.0, 4.0,  2.0]
        ];
        let constants = vec![8.0,   7.0,  10.0,   2.0];
        // expected: [-1.0000000000000009, 2.0000000000000004, 3.000000000000001, -2.0000000000000004]
        let res = gauss2(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }
    
    #[test]
    fn test_sole_gauss2_2() {
        let coefficients = vec![
            vec![10.0, -7.0, 0.0],
            vec![-3.0,  2.0, 6.0],
            vec![ 5.0, -1.0, 5.0]
        ];
        let constants = vec![6.0,   4.0,   3.0];
        // expected: [-0.7096774193548464, -1.8709677419354949, 0.9354838709677417]
        let res = gauss2(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }

    #[test]
    fn test_sole_gauss2_3() {
        let coefficients = vec![
            vec![ 5.0,   1.0,   7.0,  -7.0,   6.0,   9.0,  -8.0,   8.0,   6.0,  -1.0,  -8.0,  -7.0,   2.0,  -4.0,  -8.0,   0.0,  -6.0,  -7.0, -10.0,  -8.0],
            vec![ 7.0,  -6.0,  -6.0,  -3.0,  10.0,   8.0,  -8.0,  -4.0,   2.0,  -4.0,   0.0,   7.0,   1.0,   7.0,   2.0,   2.0,   4.0,  -4.0,   3.0,   7.0],
            vec![ 9.0,  -4.0,  -7.0,   4.0,  -9.0,   8.0,   4.0,   9.0,   5.0,   5.0,  -4.0,  -7.0,   0.0,  -6.0,   4.0,   2.0,   1.0,   3.0,  -2.0,   3.0],
            vec![ 5.0,   3.0,  -4.0,   1.0, -10.0,  -9.0,   6.0,   9.0,  -9.0,  -5.0,   0.0, -10.0,  -8.0,   9.0,   0.0,   5.0,   0.0,   7.0,  -4.0,  10.0],
            vec![-3.0,  -9.0,  -9.0,  10.0,   7.0,   1.0,   2.0,   3.0,   5.0,   8.0,  -2.0,  -1.0,   9.0,  -1.0,   1.0,   1.0,  -2.0,  -8.0,   7.0,   4.0],
            vec![ 3.0,  -3.0,   5.0,  -8.0,  -1.0,  -4.0,   8.0,  -1.0,   7.0,  10.0, -10.0,  -1.0,   4.0,   0.0,   6.0,  -4.0,  -9.0,  -6.0,  -4.0,   0.0],
            vec![ 3.0,   0.0,  10.0,   3.0,  -6.0,   7.0,  -7.0,  -8.0,   9.0,  -4.0,  -7.0,   6.0,   9.0, -10.0,   2.0,  -5.0,   3.0,  -1.0,  -3.0, -10.0],
            vec![ 7.0,   2.0,  -4.0,   4.0,   0.0,   3.0,  -6.0, -10.0,   0.0,  -4.0,   4.0,   1.0,  -9.0,  -2.0,  -6.0,   9.0,   1.0,   5.0, -10.0,   8.0],
            vec![ 9.0,  -7.0,   6.0,   6.0,   5.0,   0.0,  -7.0,  -7.0,   8.0,   6.0,  -7.0,  -6.0,  -1.0,  -9.0,  -1.0,  -9.0,   1.0,  -1.0,   1.0,  -9.0],
            vec![ 6.0,  -7.0,   5.0,   8.0,  -3.0, -10.0,   1.0,  -4.0,  -1.0,  -7.0,   6.0,   4.0,   5.0,  -5.0,  10.0,   1.0, -10.0,   7.0,  -6.0,  -7.0],
            vec![ 4.0,  -8.0,  -4.0,  -6.0,   2.0,  -5.0,   2.0,   6.0,   2.0,   1.0,  -9.0,  -4.0,   9.0,  -6.0,  -2.0,  -8.0,  -3.0,   1.0,  -1.0,   3.0],
            vec![ 3.0,  -7.0,   2.0,  -5.0, -10.0,  -2.0,   2.0, -10.0,   4.0,   6.0, -10.0,  -5.0,  -9.0,  -1.0,   7.0,   5.0,  -1.0,  -2.0,  -4.0,  -4.0],
            vec![ 7.0,   3.0,   0.0,  -2.0,   6.0,  -3.0,  10.0,   4.0,  -7.0,   1.0,   4.0,   5.0,  -2.0,  -5.0, -10.0,   5.0,   7.0,   5.0,  -9.0, -10.0],
            vec![ 1.0, -10.0,  -4.0,   4.0,  10.0,   3.0,   4.0,  -2.0,  -5.0,  10.0,  -2.0,  -3.0,  -1.0,  10.0,   4.0,   5.0,   9.0,   8.0,  -6.0,  -5.0],
            vec![-3.0,  -1.0,   6.0,  -5.0,   1.0,  -6.0,   1.0,  -3.0,   9.0,   4.0,   6.0,   0.0,  -6.0, -10.0,   2.0,   5.0,  -2.0,  -2.0,   2.0,   9.0],
            vec![-9.0,   2.0,  -2.0,   1.0,  -9.0,   7.0,  10.0,   2.0,   3.0,  -8.0,  -8.0,   5.0,   9.0, -10.0,   8.0,  -8.0,   6.0,   1.0,  -4.0, -10.0],
            vec![ 4.0,  -7.0,   0.0,   5.0,  -7.0,  10.0,   3.0,  -4.0,   9.0,  -9.0,   3.0,  -2.0,  -1.0,  10.0,   7.0,  -1.0, -10.0,   5.0,   7.0,  -5.0],
            vec![-7.0,   9.0,   8.0,   1.0,   0.0,   0.0,   0.0,   5.0,  -1.0,  -1.0, -10.0, -10.0,   4.0,  -9.0,   3.0,   5.0,  -2.0,   2.0,  -5.0,  -9.0],
            vec![-5.0,   6.0,   3.0, -10.0,  -4.0,   0.0,   5.0,   2.0,   9.0,   3.0,   4.0,   3.0,   8.0,   1.0,   1.0,   5.0,   1.0,  -8.0, -10.0,  -8.0],
            vec![ 4.0,  -9.0,  -4.0,   9.0,  -1.0,  10.0,   9.0, -10.0,  -8.0,   2.0,   4.0,   7.0,   8.0,   1.0,  -5.0,  -7.0,   5.0,   3.0,   5.0,  -8.0],
        ];
        let constants = vec![-8.0, 2.0, 5.0, 7.0, 5.0, -9.0, 0.0, 9.0, 4.0, -5.0, 8.0, -9.0, 1.0, 3.0, -2.0, -2.0, 6.0, 10.0, 2.0, -5.0];

        /*
        expected:
        [
             0.42483177  1.05426056 -0.89539233 -0.06691239  0.41554584
            -0.52006665  0.10889383 -0.67418602  1.06754043 -0.37442787
            -0.09826593 -1.07958079  1.04631257  0.13620134 -0.25838214
             0.48234027  0.49453971  1.02800194  0.56439505 -0.01779573
        ]
        */
        
        let res = gauss2(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("[");
        for i in 0..4 {
            print!("    ");
            for j in 0..5 {
                if res[i * 5 + j] >= 0.0 {
                    print!(" ");
                }
                print!("{:.8} ", res[i * 5 + j]);
            }
            println!();
        }
        println!("]");
        
    }

    #[test]
    fn test_sole_gauss2_4() {
        let coefficients = vec![
            vec![-1.0,  -5.0,  0.5,  5.5 ],
            vec![-2.0,   0.0, -1.0,  3.0 ],
            vec![-1.5, -1.25,  0.5, -0.75],
            vec![ 0.0, -1.25,  0.5,  5.5 ]
        ];
        let constants = vec![9.5, -3.0, -1.5, 9.5];
        // expected: [1.84, -0.49, 3.27, 1.32]
        let res = gauss2(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }



    #[test]
    fn test_sole_gauss3_1() {
        let coefficients = vec![
            vec![4.0, -2.0, 4.0, -2.0],
            vec![3.0,  1.0, 4.0,  2.0],
            vec![2.0,  4.0, 2.0,  1.0],
            vec![2.0, -2.0, 4.0,  2.0]
        ];
        let constants = vec![8.0,   7.0,  10.0,   2.0];
        // expected: [-1.0000000000000009, 2.0000000000000004, 3.000000000000001, -2.0000000000000004]
        let res = gauss3(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }
    
    #[test]
    fn test_sole_gauss3_2() {
        let coefficients = vec![
            vec![10.0, -7.0, 0.0],
            vec![-3.0,  2.0, 6.0],
            vec![ 5.0, -1.0, 5.0]
        ];
        let constants = vec![6.0,   4.0,   3.0];
        // expected: [-0.7096774193548464, -1.8709677419354949, 0.9354838709677417]
        let res = gauss3(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }

    #[test]
    fn test_sole_gauss3_3() {
        let coefficients = vec![
            vec![ 5.0,   1.0,   7.0,  -7.0,   6.0,   9.0,  -8.0,   8.0,   6.0,  -1.0,  -8.0,  -7.0,   2.0,  -4.0,  -8.0,   0.0,  -6.0,  -7.0, -10.0,  -8.0],
            vec![ 7.0,  -6.0,  -6.0,  -3.0,  10.0,   8.0,  -8.0,  -4.0,   2.0,  -4.0,   0.0,   7.0,   1.0,   7.0,   2.0,   2.0,   4.0,  -4.0,   3.0,   7.0],
            vec![ 9.0,  -4.0,  -7.0,   4.0,  -9.0,   8.0,   4.0,   9.0,   5.0,   5.0,  -4.0,  -7.0,   0.0,  -6.0,   4.0,   2.0,   1.0,   3.0,  -2.0,   3.0],
            vec![ 5.0,   3.0,  -4.0,   1.0, -10.0,  -9.0,   6.0,   9.0,  -9.0,  -5.0,   0.0, -10.0,  -8.0,   9.0,   0.0,   5.0,   0.0,   7.0,  -4.0,  10.0],
            vec![-3.0,  -9.0,  -9.0,  10.0,   7.0,   1.0,   2.0,   3.0,   5.0,   8.0,  -2.0,  -1.0,   9.0,  -1.0,   1.0,   1.0,  -2.0,  -8.0,   7.0,   4.0],
            vec![ 3.0,  -3.0,   5.0,  -8.0,  -1.0,  -4.0,   8.0,  -1.0,   7.0,  10.0, -10.0,  -1.0,   4.0,   0.0,   6.0,  -4.0,  -9.0,  -6.0,  -4.0,   0.0],
            vec![ 3.0,   0.0,  10.0,   3.0,  -6.0,   7.0,  -7.0,  -8.0,   9.0,  -4.0,  -7.0,   6.0,   9.0, -10.0,   2.0,  -5.0,   3.0,  -1.0,  -3.0, -10.0],
            vec![ 7.0,   2.0,  -4.0,   4.0,   0.0,   3.0,  -6.0, -10.0,   0.0,  -4.0,   4.0,   1.0,  -9.0,  -2.0,  -6.0,   9.0,   1.0,   5.0, -10.0,   8.0],
            vec![ 9.0,  -7.0,   6.0,   6.0,   5.0,   0.0,  -7.0,  -7.0,   8.0,   6.0,  -7.0,  -6.0,  -1.0,  -9.0,  -1.0,  -9.0,   1.0,  -1.0,   1.0,  -9.0],
            vec![ 6.0,  -7.0,   5.0,   8.0,  -3.0, -10.0,   1.0,  -4.0,  -1.0,  -7.0,   6.0,   4.0,   5.0,  -5.0,  10.0,   1.0, -10.0,   7.0,  -6.0,  -7.0],
            vec![ 4.0,  -8.0,  -4.0,  -6.0,   2.0,  -5.0,   2.0,   6.0,   2.0,   1.0,  -9.0,  -4.0,   9.0,  -6.0,  -2.0,  -8.0,  -3.0,   1.0,  -1.0,   3.0],
            vec![ 3.0,  -7.0,   2.0,  -5.0, -10.0,  -2.0,   2.0, -10.0,   4.0,   6.0, -10.0,  -5.0,  -9.0,  -1.0,   7.0,   5.0,  -1.0,  -2.0,  -4.0,  -4.0],
            vec![ 7.0,   3.0,   0.0,  -2.0,   6.0,  -3.0,  10.0,   4.0,  -7.0,   1.0,   4.0,   5.0,  -2.0,  -5.0, -10.0,   5.0,   7.0,   5.0,  -9.0, -10.0],
            vec![ 1.0, -10.0,  -4.0,   4.0,  10.0,   3.0,   4.0,  -2.0,  -5.0,  10.0,  -2.0,  -3.0,  -1.0,  10.0,   4.0,   5.0,   9.0,   8.0,  -6.0,  -5.0],
            vec![-3.0,  -1.0,   6.0,  -5.0,   1.0,  -6.0,   1.0,  -3.0,   9.0,   4.0,   6.0,   0.0,  -6.0, -10.0,   2.0,   5.0,  -2.0,  -2.0,   2.0,   9.0],
            vec![-9.0,   2.0,  -2.0,   1.0,  -9.0,   7.0,  10.0,   2.0,   3.0,  -8.0,  -8.0,   5.0,   9.0, -10.0,   8.0,  -8.0,   6.0,   1.0,  -4.0, -10.0],
            vec![ 4.0,  -7.0,   0.0,   5.0,  -7.0,  10.0,   3.0,  -4.0,   9.0,  -9.0,   3.0,  -2.0,  -1.0,  10.0,   7.0,  -1.0, -10.0,   5.0,   7.0,  -5.0],
            vec![-7.0,   9.0,   8.0,   1.0,   0.0,   0.0,   0.0,   5.0,  -1.0,  -1.0, -10.0, -10.0,   4.0,  -9.0,   3.0,   5.0,  -2.0,   2.0,  -5.0,  -9.0],
            vec![-5.0,   6.0,   3.0, -10.0,  -4.0,   0.0,   5.0,   2.0,   9.0,   3.0,   4.0,   3.0,   8.0,   1.0,   1.0,   5.0,   1.0,  -8.0, -10.0,  -8.0],
            vec![ 4.0,  -9.0,  -4.0,   9.0,  -1.0,  10.0,   9.0, -10.0,  -8.0,   2.0,   4.0,   7.0,   8.0,   1.0,  -5.0,  -7.0,   5.0,   3.0,   5.0,  -8.0],
        ];
        let constants = vec![-8.0, 2.0, 5.0, 7.0, 5.0, -9.0, 0.0, 9.0, 4.0, -5.0, 8.0, -9.0, 1.0, 3.0, -2.0, -2.0, 6.0, 10.0, 2.0, -5.0];

        /*
        expected:
        [
             0.42483177  1.05426056 -0.89539233 -0.06691239  0.41554584
            -0.52006665  0.10889383 -0.67418602  1.06754043 -0.37442787
            -0.09826593 -1.07958079  1.04631257  0.13620134 -0.25838214
             0.48234027  0.49453971  1.02800194  0.56439505 -0.01779573
        ]
        */
        
        let res = gauss3(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("[");
        for i in 0..4 {
            print!("    ");
            for j in 0..5 {
                if res[i * 5 + j] >= 0.0 {
                    print!(" ");
                }
                print!("{:.8} ", res[i * 5 + j]);
            }
            println!();
        }
        println!("]");
        
    }

    #[test]
    fn test_sole_gauss3_4() {
        let coefficients = vec![
            vec![-1.0, -5.00,  0.5,  5.50],
            vec![-2.0,  0.00, -1.0,  3.00],
            vec![-1.5, -1.25,  0.5, -0.75],
            vec![ 0.0, -1.25,  0.5,  5.50]
        ];
        let constants = vec![9.5, -3.0, -1.5, 9.5];
        // expected: [1.84, -0.49, 3.27, 1.32]
        let res = gauss3(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }
    
    #[test]
    fn test_sole_gauss3_5() {
        let coefficients = vec![
            vec![-2.00, -4.00,  5.00, -2.0],
            vec![ 6.50,  2.00,  1.25,  3.5],
            vec![ 1.75,  7.25, -8.75,  5.5],
            vec![ 3.25, -2.75, -3.75,  1.0]
        ];
        let constants = vec![-5.0, 1.75, 5.0, 6.0];
        // expected: [1.0, -0.0, -1.0, -1.0]
        let res = gauss3(coefficients, constants);
        assert!(res.is_some());
        let res = res.unwrap_or_default();
        println!("{res:?}");
    }
}